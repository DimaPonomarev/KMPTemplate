// Generated by Touchlab SKIE 0.9.3

import Foundation

public final class SkieSwiftOptionalFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol,
        Swift._ObjectiveCBridgeable {

    @_spi(SKIE)
    public let delegate: MultiPlatformLibrary.Kotlinx_coroutines_coreFlow

    init(`internal` flow: MultiPlatformLibrary.Kotlinx_coroutines_coreFlow) {
        delegate = flow
    }

    public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalFlow<T>?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalFlow<T>?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject> {
        return MultiPlatformLibrary.SkieKotlinOptionalFlow(delegate)
    }

    private static func fromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to MultiPlatformLibrary.SkieSwiftOptionalFlow")
        }
        return .init(internal: source)
    }

    public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?> {
        return SkieSwiftFlowIterator(flow: delegate)
    }

    public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>

    public typealias Element = T?

    public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>

}
