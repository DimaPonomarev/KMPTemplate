// Generated by Touchlab SKIE 0.9.3

import Foundation

public final class SkieSwiftOptionalMutableSharedFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol,
        Swift._ObjectiveCBridgeable {

    @_spi(SKIE)
    public let delegate: MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow

    public var subscriptionCount: MultiPlatformLibrary.SkieSwiftStateFlow<MultiPlatformLibrary.KotlinInt> {
        bridgeSubscriptionCount(delegate.subscriptionCount)
    }

    public var replayCache: [T?] {
        delegate.replayCache as! [T?]
    }

    init(`internal` flow: MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow) {
        delegate = flow
    }

    @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
    public func emit(value: T?) async throws -> Swift.Void {
        try await delegate.emit(value: value)
    }

    public func tryEmit(value: T?) -> Swift.Bool {
        delegate.tryEmit(value: value)
    }

    public func resetReplayCache() -> Swift.Void {
        delegate.resetReplayCache()
    }

    public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject> {
        return MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow(delegate)
    }

    private static func fromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow")
        }
        return .init(internal: source)
    }

    public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?> {
        return SkieSwiftFlowIterator(flow: delegate)
    }

    public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>

    public typealias Element = T?

    public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>

}
