// Generated by Touchlab SKIE 0.9.3

import Foundation

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftOptionalFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinSharedFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalSharedFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftOptionalSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinMutableSharedFlow(flow.delegate)
}

public func SkieKotlinMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinMutableSharedFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow
        where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinStateFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalStateFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftOptionalStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinMutableStateFlow(flow.delegate)
}

public func SkieKotlinMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinMutableStateFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

extension MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow
        where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}
