// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name MultiPlatformLibrary
import Foundation
@_exported import MultiPlatformLibrary
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Skie {
  public enum KotlinxCoroutinesCore {
    public enum Runnable {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreRunnable
    }
    public enum Flow {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = MultiPlatformLibrary.Skie.KotlinxCoroutinesCore
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = MultiPlatformLibrary.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = MultiPlatformLibrary.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = MultiPlatformLibrary.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = MultiPlatformLibrary.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = MultiPlatformLibrary.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = MultiPlatformLibrary.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = MultiPlatformLibrary.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = MultiPlatformLibrary.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = MultiPlatformLibrary.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = MultiPlatformLibrary.Skie.RuntimeKotlin
  public enum Resources {
    public enum StringDesc {
      public enum LocaleType {
      }
    }
  }
  public typealias dev_icerock_moko__resources = MultiPlatformLibrary.Skie.Resources
  public enum Shared {
    public enum HomeViewModel {
      public enum Action {
      }
    }
    public enum LoginViewModel {
      public enum Action {
      }
    }
    public enum ViewModelState {
    }
  }
  public typealias Fifth__shared = MultiPlatformLibrary.Skie.Shared
}
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  @objc deinit
  public typealias Element = T
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #endif
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  @_spi(SKIE) var delegate: Self.Delegate { get }
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  @_spi(SKIE) var delegate: Self.Delegate { get }
}
#endif
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreSharedFlow
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreSharedFlow
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow
  final public var subscriptionCount: MultiPlatformLibrary.SkieSwiftStateFlow<MultiPlatformLibrary.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow
  final public var subscriptionCount: MultiPlatformLibrary.SkieSwiftStateFlow<MultiPlatformLibrary.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreStateFlow
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreStateFlow
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableStateFlow
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: MultiPlatformLibrary.SkieSwiftStateFlow<MultiPlatformLibrary.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : MultiPlatformLibrary.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  @_spi(SKIE) final public let delegate: any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableStateFlow
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: MultiPlatformLibrary.SkieSwiftStateFlow<MultiPlatformLibrary.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = MultiPlatformLibrary.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any MultiPlatformLibrary.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
extension MultiPlatformLibrary.Kotlinx_coroutines_coreFlowCollector {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
}
extension MultiPlatformLibrary.Kotlinx_coroutines_coreFlow {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any MultiPlatformLibrary.Kotlinx_coroutines_coreFlowCollector) async throws
}
extension MultiPlatformLibrary.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: MultiPlatformLibrary.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: MultiPlatformLibrary.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: MultiPlatformLibrary.SkieColdFlowIterator<E>) -> MultiPlatformLibrary.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension MultiPlatformLibrary.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> MultiPlatformLibrary.KotlinBoolean
}
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
}
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableSharedFlow<T>)
}
public func SkieKotlinStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableStateFlow<T> where T : AnyObject
public func SkieKotlinMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>) -> MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
extension MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: MultiPlatformLibrary.SkieSwiftOptionalMutableStateFlow<T>)
}
extension MultiPlatformLibrary.Skie.Resources.StringDesc.LocaleType {
  @frozen public enum __Sealed : Swift.Hashable {
    case custom(MultiPlatformLibrary.StringDescLocaleType.Custom)
    case system(MultiPlatformLibrary.StringDescLocaleType.System)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: MultiPlatformLibrary.Skie.Resources.StringDesc.LocaleType.__Sealed, b: MultiPlatformLibrary.Skie.Resources.StringDesc.LocaleType.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> MultiPlatformLibrary.Skie.Resources.StringDesc.LocaleType.__Sealed where __Sealed : MultiPlatformLibrary.StringDescLocaleType
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> MultiPlatformLibrary.Skie.Resources.StringDesc.LocaleType.__Sealed? where __Sealed : MultiPlatformLibrary.StringDescLocaleType
extension MultiPlatformLibrary.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(MultiPlatformLibrary.Skie_SuspendResult.Canceled)
    case error(MultiPlatformLibrary.Skie_SuspendResult.Error)
    case success(MultiPlatformLibrary.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: MultiPlatformLibrary.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: MultiPlatformLibrary.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> MultiPlatformLibrary.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : MultiPlatformLibrary.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> MultiPlatformLibrary.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : MultiPlatformLibrary.Skie_SuspendResult
extension MultiPlatformLibrary.Skie.Shared.HomeViewModel.Action {
  @frozen public enum __Sealed : Swift.Hashable {
    case goBack(MultiPlatformLibrary.HomeViewModelActionGoBack)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: MultiPlatformLibrary.Skie.Shared.HomeViewModel.Action.__Sealed, b: MultiPlatformLibrary.Skie.Shared.HomeViewModel.Action.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> MultiPlatformLibrary.Skie.Shared.HomeViewModel.Action.__Sealed where __Sealed : MultiPlatformLibrary.HomeViewModelAction
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> MultiPlatformLibrary.Skie.Shared.HomeViewModel.Action.__Sealed? where __Sealed : MultiPlatformLibrary.HomeViewModelAction
extension MultiPlatformLibrary.Skie.Shared.LoginViewModel.Action {
  @frozen public enum __Sealed : Swift.Hashable {
    case showNext(MultiPlatformLibrary.LoginViewModelActionShowNext)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: MultiPlatformLibrary.Skie.Shared.LoginViewModel.Action.__Sealed, b: MultiPlatformLibrary.Skie.Shared.LoginViewModel.Action.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> MultiPlatformLibrary.Skie.Shared.LoginViewModel.Action.__Sealed where __Sealed : MultiPlatformLibrary.LoginViewModelAction
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> MultiPlatformLibrary.Skie.Shared.LoginViewModel.Action.__Sealed? where __Sealed : MultiPlatformLibrary.LoginViewModelAction
extension MultiPlatformLibrary.Skie.Shared.ViewModelState {
  @frozen public enum __Sealed : Swift.Hashable {
    case error(MultiPlatformLibrary.ViewModelState.Error)
    case idle(MultiPlatformLibrary.ViewModelState.Idle)
    case loading(MultiPlatformLibrary.ViewModelState.Loading)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: MultiPlatformLibrary.Skie.Shared.ViewModelState.__Sealed, b: MultiPlatformLibrary.Skie.Shared.ViewModelState.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> MultiPlatformLibrary.Skie.Shared.ViewModelState.__Sealed where __Sealed : MultiPlatformLibrary.ViewModelState
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> MultiPlatformLibrary.Skie.Shared.ViewModelState.__Sealed? where __Sealed : MultiPlatformLibrary.ViewModelState
public func DisposableHandle(block: @escaping () -> Swift.Void) -> any MultiPlatformLibrary.DisposableHandle
extension MultiPlatformLibrary.DisposableHandle {
  public func plus(other: any MultiPlatformLibrary.DisposableHandle) -> any MultiPlatformLibrary.DisposableHandle
}
extension ObjectiveC.NSObject {
  public func bind(flow: MultiPlatformLibrary.CStateFlow<Swift.AnyObject>, setter: @escaping (Any, Any?) -> Swift.Void) -> any MultiPlatformLibrary.DisposableHandle
  public func joinToStringDesc(separator: Swift.String) -> any MultiPlatformLibrary.StringDesc
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func bindBackgroundColor(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>, trueColor: UIKit.UIColor, falseColor: UIKit.UIColor) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindFocus(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindHidden(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public func bindEnabled(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindFocusTwoWay(flow: MultiPlatformLibrary.CMutableStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func setEventHandler(event: Swift.UInt64, lambda: @escaping (UIKit.UIControl) -> Swift.Void) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UITextView {
  @_Concurrency.MainActor @preconcurrency public func bindFocusTwoWay(flow: MultiPlatformLibrary.CMutableStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindText(flow: MultiPlatformLibrary.CStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindTextTwoWay(flow: MultiPlatformLibrary.CMutableStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func bindImage(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>, trueImage: UIKit.UIImage, falseImage: UIKit.UIImage) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindTitle(flow: MultiPlatformLibrary.CStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UISwitch {
  @_Concurrency.MainActor @preconcurrency public func bindSwitchOn(flow: MultiPlatformLibrary.CStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindSwitchOnTwoWay(flow: MultiPlatformLibrary.CMutableStateFlow<MultiPlatformLibrary.KotlinBoolean>) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public func bindText(flow: MultiPlatformLibrary.CStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
}
extension UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public func bindText(flow: MultiPlatformLibrary.CStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
  @_Concurrency.MainActor @preconcurrency public func bindTextTwoWay(flow: MultiPlatformLibrary.CMutableStateFlow<Foundation.NSString>) -> any MultiPlatformLibrary.DisposableHandle
}
extension Foundation.NotificationCenter {
  public func setEventHandler(notification: Swift.String?, ref: Any, lambda: @escaping (Any) -> Swift.Void) -> any MultiPlatformLibrary.DisposableHandle
}
extension MultiPlatformLibrary.ResourceContainer {
  public func getAssetByFilePath(filePath: Swift.String) -> MultiPlatformLibrary.AssetResource?
  public func getImageByFileName(fileName: Swift.String) -> MultiPlatformLibrary.ImageResource?
}
public var isBundleSearchLogEnabled: Swift.Bool {
  get
  set(value)
}
extension Swift.String {
  public func desc() -> MultiPlatformLibrary.RawStringDesc
  public func asImageUrl() -> any MultiPlatformLibrary.ImageDesc
}
extension MultiPlatformLibrary.StringDesc {
  public func plus(other: any MultiPlatformLibrary.StringDesc) -> any MultiPlatformLibrary.StringDesc
}
extension MultiPlatformLibrary.ColorDesc {
  public func getUIColor() -> UIKit.UIColor
}
public func getPlatform() -> any MultiPlatformLibrary.Platform
